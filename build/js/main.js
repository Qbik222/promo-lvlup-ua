"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener("DOMContentLoaded", function () {
  var slides = document.querySelectorAll(".slide");
  var leftBtn = document.querySelector(".slide__move-left");
  var rightBtn = document.querySelector(".slide__move-right");
  var slidesIcons = document.querySelectorAll(".quests__icons-item");
  var glitchLayers = [];
  var current = 1;
  // let week = 2;
  var week = localStorage.getItem("week") ? parseInt(localStorage.getItem("week")) : 1;
  if (week === 1) {
    slides.forEach(function (slide, i) {
      if (i >= 6 || slide.classList.contains("quest".concat(i))) {
        slide.remove();
      }
    });
    slidesIcons.forEach(function (icon, i) {
      if (i >= 6 || icon.classList.contains("quest".concat(i))) {
        icon.remove();
      }
    });
  }
  if (week === 2) {
    for (var i = 1; i <= 6; i++) {
      var _week = document.querySelectorAll(".quest".concat(i));
      _week.forEach(function (item) {
        item.remove();
      });
    }
  }
  slides.forEach(function (slide) {
    glitchLayers = [].concat(_toConsumableArray(glitchLayers), _toConsumableArray(slide.querySelectorAll(".glitch__layer")));
  });
  slides[current].classList.add("_active");
  function updateGlitchLayers(index) {
    if (week === 2) {
      index += 6;
    }
    glitchLayers.forEach(function (layer) {
      layer.classList.forEach(function (className) {
        if (className.startsWith("slide-info-glitch")) {
          layer.classList.remove("slide-info-glitch");
        }
        if (className.startsWith("quest")) {
          layer.classList.remove(className);
        }
      });
      if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
        layer.classList.add("quest".concat(index));
        layer.style.background = "url(\"./img/quests/slide".concat(index, "/pers.png\") no-repeat 0 0/contain");
      } else {
        layer.classList.add("slide-info-glitch");
      }
    });
  }
  function moveSlider(slides, direction) {
    if (direction === "left") {
      --current;
      if (current < 0) current = slides.length - 1;
    } else if (direction === "right") {
      ++current;
      if (current > slides.length - 1) current = 0;
    }
    slides.forEach(function (slide, i) {
      slide.classList.toggle("_active", i === current);
      slide.classList.remove("glitch");
    });
    SlideIconsInit(slidesIcons, current);
  }
  function SlideIconsInit(icons, current) {
    icons.forEach(function (icon, iconIndex) {
      icon.classList.toggle("_current", current === iconIndex);
    });
  }
  function handleClick(direction) {
    slides[current].classList.add("glitch");
    rightBtn.style.pointerEvents = "none";
    leftBtn.style.pointerEvents = "none";
    var nextSlideIndex = direction === "left" ? current === 0 ? slides.length : current : current === slides.length - 1 ? 1 : current + 2;
    updateGlitchLayers(nextSlideIndex);
    setTimeout(function () {
      glitchLayers.forEach(function (layer) {
        layer.classList.forEach(function (className) {
          if (className.startsWith("slide-info-glitch") || className.startsWith("quest")) {
            layer.classList.remove(className);
          }
        });
      });
      moveSlider(slides, direction);
      rightBtn.style.pointerEvents = "initial";
      leftBtn.style.pointerEvents = "initial";
    }, 1000);
  }
  leftBtn.addEventListener("click", function () {
    return handleClick("left");
  });
  rightBtn.addEventListener("click", function () {
    return handleClick("right");
  });
  slidesIcons.forEach(function (icon, i) {
    icon.addEventListener("click", function () {
      setTimeout(function () {
        slidesIcons.forEach(function (item) {
          return item.classList.remove("_current");
        });
      }, 1000);
      slides[current].classList.add("glitch");
      current = i;
      updateGlitchLayers(current + 1);
      setTimeout(function () {
        SlideIconsInit(slidesIcons, current);
        slides.forEach(function (slide, index) {
          slide.classList.toggle("_active", index === current);
          slide.classList.remove("glitch");
        });
        rightBtn.style.pointerEvents = "initial";
        leftBtn.style.pointerEvents = "initial";
      }, 1000);
    });
  });
  SlideIconsInit(slidesIcons, current);

  // for test

  var week1 = document.querySelector(".week1");
  var week2 = document.querySelector(".week2");
  week1.addEventListener("click", function () {
    localStorage.setItem("week", 1);
    location.reload();
  });
  week2.addEventListener("click", function () {
    localStorage.setItem("week", 2);
    location.reload();
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
