"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener("DOMContentLoaded", function () {
  // let week = 2;
  //
  // if(week === 1){
  //     slides.forEach((slide, i) =>{
  //
  //         if(i >= 6 || slide.classList.contains(`quest${i}`)){
  //             slide.remove()
  //         }
  //     })
  //     slidesIcons.forEach((icon, i) =>{
  //         if(i >= 6 || icon.classList.contains(`quest${i}`)){
  //             icon.remove()
  //         }
  //     })
  // }
  // if(week === 2){
  //     for (let i = 1; i <= 6; i++){
  //         let week1 = document.querySelectorAll(`.quest${i}`)
  //         week1.forEach(item => {
  //             item.remove()
  //         })
  //
  //     }
  // }

  var slides = document.querySelectorAll(".slide");
  var leftBtn = document.querySelector(".slide__move-left");
  var rightBtn = document.querySelector(".slide__move-right");
  var slidesIcons = document.querySelectorAll(".quests__icons-item");
  var glitchLayers = [];
  slides.forEach(function (slide) {
    glitchLayers = [].concat(_toConsumableArray(glitchLayers), _toConsumableArray(slide.querySelectorAll(".glitch__layer")));
  });
  var current = 1;
  slides.forEach(function (slide, i) {
    if (i === current) {
      slide.classList.add("_active");
    }
  });
  function moveSlider(slides, direction) {
    if (direction === "left") {
      --current;
      slides.forEach(function (slide, i) {
        slide.classList.remove("_active", "glitch");
        if (current < 0) current = slides.length - 1;
        if (i === current) {
          slide.classList.add("_active");
          slide.classList.remove("glitch");
        }
      });
    }
    if (direction === "right") {
      ++current;
      slides.forEach(function (slide, i) {
        slide.classList.remove("_active", "glitch");
        if (current > slides.length - 1) current = 0;
        if (i === current) {
          slide.classList.add("_active");
          slide.classList.remove("glitch");
        }
      });
    }
    SlideIconsInit(slidesIcons, current);
  }
  leftBtn.addEventListener("click", function () {
    slides[current].classList.add("glitch");
    if (current === 0) {
      glitchLayers.forEach(function (layer) {
        if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
          layer.classList.add("quest".concat(slides.length));
          layer.style.background = "url(\"../img/quests/slide".concat(slides.length, "/pers.png\") no-repeat 0 0/contain");
        } else {
          layer.classList.add("slide-info-glitch");
        }
      });
    } else {
      glitchLayers.forEach(function (layer) {
        if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
          layer.classList.add("quest".concat(current));
          layer.style.background = "url(\"../img/quests/slide".concat(current, "/pers.png\") no-repeat 0 0/contain");
        } else {
          layer.classList.add("slide-info-glitch");
        }
      });
    }
    rightBtn.style.pointerEvents = "none";
    leftBtn.style.pointerEvents = "none";
    setTimeout(function () {
      glitchLayers.forEach(function (layer) {
        layer.classList.forEach(function (className) {
          if (className.startsWith("slide-info-glitch")) {
            layer.classList.remove("slide-info-glitch");
          }
          if (className.startsWith("quest")) {
            layer.classList.remove(className);
          }
        });
      });
      moveSlider(slides, "left");
      rightBtn.style.pointerEvents = "initial";
      leftBtn.style.pointerEvents = "initial";
    }, 1000);
  });
  rightBtn.addEventListener("click", function () {
    slides[current].classList.add("glitch");
    rightBtn.style.pointerEvents = "none";
    leftBtn.style.pointerEvents = "none";
    if (current === slides.length - 1) {
      glitchLayers.forEach(function (layer) {
        if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
          layer.classList.add("quest1");
          layer.style.background = "url(\"../img/quests/slide1/pers.png\") no-repeat 0 0/contain";
        } else {
          layer.classList.add("slide-info-glitch");
        }
      });
    } else {
      current += 2;
      glitchLayers.forEach(function (layer) {
        if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
          layer.classList.add("quest".concat(current));
          layer.style.background = "url(\"../img/quests/slide".concat(current, "/pers.png\") no-repeat 0 0/contain");
        } else {
          layer.classList.add("slide-info-glitch");
        }
      });
      current -= 2;
    }
    setTimeout(function () {
      glitchLayers.forEach(function (layer) {
        layer.classList.forEach(function (className) {
          if (className.startsWith("slide-info-glitch")) {
            layer.classList.remove("slide-info-glitch");
          }
          if (className.startsWith("quest")) {
            layer.classList.remove(className);
          }
        });
      });
      moveSlider(slides, "right");
      rightBtn.style.pointerEvents = "initial";
      leftBtn.style.pointerEvents = "initial";
    }, 1000);
  });
  function SlideIconsInit(icons, current) {
    // slides.forEach((slide, slideIndex) => {
    //     icons.forEach((icon, iconIndex) =>{
    //         if (current ==)
    //     })
    // })
    icons.forEach(function (icon, iconIndex) {
      icon.classList.remove("_current");
      if (current === iconIndex) {
        icon.classList.add("_current");
      }
    });
  }
  slidesIcons.forEach(function (icon, i) {
    icon.addEventListener("click", function (e) {
      setTimeout(function () {
        slidesIcons.forEach(function (item) {
          item.classList.remove("_current");
        });
      }, 1000);
      slides[current].classList.add("glitch");
      current = i;
      if (i === current) {
        slides.forEach(function (slide, i) {
          if (i === current) {
            rightBtn.style.pointerEvents = "none";
            leftBtn.style.pointerEvents = "none";
            glitchLayers.forEach(function (layer) {
              if (layer.parentElement.parentElement.classList[0] !== "slide__info") {
                layer.classList.add("quest".concat(current + 1));
                layer.style.background = "url(\"../img/quests/slide".concat(current + 1, "/pers.png\") no-repeat 0 0/contain");
              } else {
                layer.classList.add("slide-info-glitch");
              }
            });
            // slide.classList.remove("glitch")

            setTimeout(function () {
              icon.classList.add("_current");
              glitchLayers.forEach(function (layer) {
                layer.classList.forEach(function (className) {
                  if (className.startsWith("slide-info-glitch")) {
                    layer.classList.remove("slide-info-glitch");
                  }
                  if (className.startsWith("quest")) {
                    layer.classList.remove(className);
                  }
                });
              });
              rightBtn.style.pointerEvents = "initial";
              leftBtn.style.pointerEvents = "initial";
              slides.forEach(function (item, i) {
                item.classList.remove("glitch");
                if (i === current) {
                  item.classList.add("_active");
                } else {
                  item.classList.remove("_active");
                }
              });
              // slide.classList.add("_active")
            }, 1000);
          }
        });
      }
    });
  });
  SlideIconsInit(slidesIcons, current);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
